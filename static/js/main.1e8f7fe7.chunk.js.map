{"version":3,"sources":["lib/DragOverlay.js","lib/CountDown.js","lib/PlotInteractionBox.js","lib/PlotInteractionProvider.js","index.js","lib/PlotPanningController.js"],"names":["DragOverlay","handleMouseMove","ev","preventDefault","stopPropagation","mouseMoveHandler","_this","props","handleMouseUp","mouseUpHandler","cursor","this","react_default","a","createElement","className","style","document","addEventListener","removeEventListener","PureComponent","CountDown","_this$props","timeout","callback","setTimeout","clearTimeout","_this$props2","MODE_HOVERING","ACTION_MOUSEDOWN","ACTION_MOUSEMOVE","ACTION_MOUSEUP","ACTION_TIMEOUT","INTERACTION_MODEL_DEFAULT","_INTERACTION_MODEL_DE","Object","defineProperty","_MODE_CLICKING","_MODE_AUTOSELECTING","INTERACTION_MODEL_SELECTING","_INTERACTION_MODEL_SE","_MODE_CLICKING2","INTERACTION_MODEL_PANNING","_INTERACTION_MODEL_PA","_MODE_CLICKING3","INTERACTION_MODEL_BARE","_INTERACTION_MODEL_BA","PlotInteractionBox","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleMouseMove_Hovering","hoveringHandler","getCustomEventObject","handleMouseOut_Hovering","hoverEndHandler","handleMouseDown_Hovering","myEV","initialMouseDownPosition","transition","clickTimeout","autoSelectingTimeout","handleMouseMove_Clicking","assertThisInitialized","Math","abs","domX","domY","handleMouseUp_Clicking","clickHandler","doubleClickHandler","prevClickTimeStamp","timeStamp","handleMouseMove_AutoSelecting","selectingHandler","start","end","handleMouseUp_AutoSelecting","handleMouseMove_Selecting","handleMouseUp_Selecting","selectedHandler","handleMouseMove_Panning","panningHandler","handleMouseUp_Panning","pannedHandler","state","mode","ref","React","createRef","width","height","children","Fragment","onMouseMove","onMouseOut","onMouseDown","src_lib_DragOverlay","lib_CountDown","Error","action","nextMode","transitionGraph","setState","_this$ref$current$get","current","getBoundingClientRect","left","top","clientX","clientY","PlotInteractionProvider","handleHovering","hoveringPosition","handleHoverEnd","handleClick","clickPosition","handleDoubleClick","doubleClickPosition","handleSelecting","selectingPositions","handleSelected","selectedPositions","handlePanning","panningPositions","handlePanned","pannedPositions","render","lib_PlotInteractionBox","Component","TRANSITION_GRAPH","PlotInteractionBoxBundle","transitionGraph_","interactions","hoveringDomX","hoveringDomY","hoveringClientX","hoveringClientY","panningStartDomX","panningStartDomY","panningStartClientX","panningStartClientY","panningEndDomX","panningEndDomY","panningEndClientX","panningEndClientY","selectingStartDomX","selectingStartDomY","selectingStartClientX","selectingStartClientY","selectingEndDomX","selectingEndDomY","selectingEndClientX","selectingEndClientY","clickDomX","clickDomY","clickClientX","clickClientY","doubleClickDomX","doubleClickDomY","doubleClickClientX","doubleClickClientY","_this2","_this$state","type","min","max","value","onChange","Number","parseInt","target","positions","objectSpread","backgroundColor","JSON","stringify","PlotInteractionProviderBundle","_this3","_this4","_this$state2","lib_PlotInteractionProvider","data","fontSize","PlotInteractionProviderwithVerticalCrosshairBundle","_this5","crosshairX","_this6","position","backgroundImage","dist_default","minX","maxX","X","dist","selectHandler","ReactDOM","react_router_dom","to","react_router","path","exact","component","getElementById"],"mappings":"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","file":"static/js/main.1e8f7fe7.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\"\nimport PropTypes from 'prop-types'\n// CSS\nimport \"./DragOverlay.css\"\n\nclass DragOverlay extends PureComponent {\n  render() {\n    let { cursor} = this.props\n    return <div className=\"fullscreen\" style={{cursor:cursor}}></div>\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.addEventListener(\"mouseup\",this.handleMouseUp,true)\n    //document.addEventListener(\"DOMMouseScroll\",this.ignoreScroll)\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.removeEventListener(\"mouseup\",this.handleMouseUp,true)\n    //document.removeEventListener(\"DOMMouseScroll\",this.ignoreScroll)\n  }\n  \n  handleMouseMove = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseMoveHandler} = this.props\n    mouseMoveHandler(ev)\n  }\n\n  handleMouseUp = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseUpHandler} = this.props\n    mouseUpHandler(ev)\n  }\n  \n  ignoreScroll(ev){\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n}\n\n\nDragOverlay.propTypes = {\n  cursor: PropTypes.string.isRequired,\n  mouseMoveHandler: PropTypes.func.isRequired,\n  mouseUpHandler: PropTypes.func.isRequired\n}\n\nexport default DragOverlay\n","import {PureComponent} from \"react\"\n\nclass CountDown extends PureComponent{\n  render(){\n    return null\n  }\n  \n  componentDidMount(){\n    let {timeout,callback} = this.props\n    this.timeout = setTimeout(callback,timeout)\n  }\n\n  componentDidUpdate(){\n    clearTimeout(this.timeout)\n    let {timeout,callback} = this.props\n    this.timeout = setTimeout(callback,timeout)\n  }\n\n  componentWillUnmount(){\n    clearTimeout(this.timeout)\n  }\n}\n\nexport default CountDown\n","import React, { PureComponent } from 'react';\nimport PropTypes from \"prop-types\";\n// Components\nimport DragOverlay from \"./DragOverlay\";\nimport CountDown from \"./CountDown\";\n\nconst MODE_HOVERING = \"hovering\";\nconst MODE_CLICKING = \"clicking\";\nconst MODE_AUTOSELECTING = \"autoSelecting\";\nconst MODE_SELECTING = \"selecting\";\nconst MODE_PANNING = \"panning\";\n\nconst ACTION_MOUSEDOWN = \"mouseDown\";\nconst ACTION_MOUSEMOVE = \"mouseMove\";\nconst ACTION_MOUSEUP = \"mouseUp\";\nconst ACTION_TIMEOUT = \"timeout\";\n\nexport const INTERACTION_MODEL_DEFAULT = {[MODE_HOVERING]:{ [ACTION_MOUSEDOWN]:MODE_CLICKING},\n                                          [MODE_CLICKING]:{ [ACTION_TIMEOUT]:MODE_AUTOSELECTING,\n                                                            [ACTION_MOUSEMOVE]:MODE_SELECTING,\n                                                            [ACTION_MOUSEUP]:MODE_HOVERING\n                                                            },\n                                          [MODE_AUTOSELECTING]:{[ACTION_TIMEOUT]:MODE_PANNING,\n                                                                [ACTION_MOUSEMOVE]:MODE_SELECTING\n                                                                },\n                                          [MODE_SELECTING]:{[ACTION_MOUSEUP]:MODE_HOVERING},\n                                          [MODE_PANNING]:{[ACTION_MOUSEUP]:MODE_HOVERING}\n                                          };\n\nexport const INTERACTION_MODEL_SELECTING = {[MODE_HOVERING]:{ [ACTION_MOUSEDOWN]:MODE_CLICKING},\n                                            [MODE_CLICKING]:{ [ACTION_TIMEOUT]:MODE_SELECTING,\n                                                              [ACTION_MOUSEMOVE]:MODE_SELECTING,\n                                                              [ACTION_MOUSEUP]:MODE_HOVERING\n                                                              },\n                                            [MODE_SELECTING]:{[ACTION_MOUSEUP]:MODE_HOVERING}\n                                            };\n\nexport const INTERACTION_MODEL_PANNING = {[MODE_HOVERING]:{ [ACTION_MOUSEDOWN]:MODE_CLICKING},\n                                          [MODE_CLICKING]:{ [ACTION_TIMEOUT]:MODE_PANNING,\n                                                            [ACTION_MOUSEMOVE]:MODE_PANNING,\n                                                            [ACTION_MOUSEUP]:MODE_HOVERING\n                                                            },\n                                          [MODE_PANNING]:{  [ACTION_MOUSEUP]:MODE_HOVERING}\n                                          };\n\nexport const INTERACTION_MODEL_BARE = { [MODE_HOVERING]:{[ACTION_MOUSEDOWN]:MODE_CLICKING},\n                                        [MODE_CLICKING]:{[ACTION_MOUSEUP]:MODE_HOVERING},\n                                        };\n\nclass PlotInteractionBox extends PureComponent {\n  constructor(props){\n    super(props);\n    this.state={mode:MODE_HOVERING};\n    this.ref = React.createRef();\n    this.initialMouseDownPosition = null;\n    this.prevClickTimeStamp = null;\n  }\n\n  render() {\n    let { width,height,\n          children\n          } = this.props;\n    let style = {width,height};\n    switch (this.state.mode) {\n      case MODE_HOVERING:\n        return (\n          <>\n            <div  ref={this.ref} style={style}\n                  onMouseMove={this.handleMouseMove_Hovering}\n                  onMouseOut={this.handleMouseOut_Hovering}\n                  onMouseDown={this.handleMouseDown_Hovering}\n                  >\n              {children}\n            </div>\n          </>\n        );\n      case MODE_CLICKING:\n        return (\n          <>\n            <div  ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay mouseMoveHandler={this.handleMouseMove_Clicking} mouseUpHandler={this.handleMouseUp_Clicking} cursor=\"point\"/>\n            <CountDown timeout={200} callback={this.clickTimeout}/>\n          </>\n        );\n      case MODE_AUTOSELECTING:\n        return (\n          <>\n            <div  ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay mouseMoveHandler={this.handleMouseMove_AutoSelecting} mouseUpHandler={this.handleMouseUp_AutoSelecting} cursor=\"nesw-resize\"/>\n            <CountDown timeout={500} callback={this.autoSelectingTimeout}/>\n          </>\n        );\n      case MODE_SELECTING:\n        return (\n          <>\n            <div  ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay mouseMoveHandler={this.handleMouseMove_Selecting} mouseUpHandler={this.handleMouseUp_Selecting} cursor=\"nesw-resize\"/>\n          </>\n        );\n      case MODE_PANNING:\n        return (\n          <>\n            <div  ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay mouseMoveHandler={this.handleMouseMove_Panning} mouseUpHandler={this.handleMouseUp_Panning} cursor=\"grabbing\"/>\n          </>\n        );\n      default:\n        throw new Error(\"ProgrammerTooDumbError\");\n    }\n  }\n  \n  transition(action) {\n    let {transitionGraph} = this.props;\n    let {mode} = this.state;\n    let nextMode = transitionGraph[mode][action];\n    if (nextMode) {\n      this.setState({mode:nextMode});\n    }\n  }\n  \n  getCustomEventObject(ev){\n    let {left,top} = this.ref.current.getBoundingClientRect();\n    let {clientX,clientY} = ev;\n    let domX = clientX - left;\n    let domY = clientY - top;\n    return {domX,domY,clientX,clientY}\n  }\n  \n  handleMouseMove_Hovering = (ev)=>{\n    let {hoveringHandler} = this.props;\n    let myEV = this.getCustomEventObject(ev);\n    hoveringHandler(myEV);\n  }\n\n  handleMouseOut_Hovering = (ev)=>{\n    let {hoverEndHandler} = this.props;\n    hoverEndHandler();\n  }\n  \n  handleMouseDown_Hovering = (ev)=>{\n    let {hoverEndHandler} = this.props;\n    ev.preventDefault();\n    let myEV = this.getCustomEventObject(ev);\n    this.initialMouseDownPosition = myEV;\n    hoverEndHandler();\n    this.transition(ACTION_MOUSEDOWN);\n  }\n  \n  clickTimeout = ()=> {\n    this.transition(ACTION_TIMEOUT);\n  }\n\n  autoSelectingTimeout = ()=>{\n    this.transition(ACTION_TIMEOUT);\n  }\n  \n  handleMouseMove_Clicking = (ev)=> {\n    let {initialMouseDownPosition} = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (Math.abs(myEV.domX-initialMouseDownPosition.domX)<10 ||\n        Math.abs(myEV.domY-initialMouseDownPosition.domX)<10) {\n      return;\n    }\n    else {\n      this.transition(ACTION_MOUSEMOVE);\n    }\n  }\n\n  handleMouseUp_Clicking = (ev)=> {\n    let {clickHandler,doubleClickHandler} = this.props;\n    let {prevClickTimeStamp} = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (prevClickTimeStamp===null || prevClickTimeStamp+200<ev.timeStamp ) {\n      this.prevClickTimeStamp = ev.timeStamp;\n      clickHandler(myEV);\n    }\n    else {\n      this.prevClickTimeStamp = null;\n      doubleClickHandler(myEV);\n    }\n    this.transition(ACTION_MOUSEUP);\n  }\n\n\n  handleMouseMove_AutoSelecting = (ev)=>{\n    let {selectingHandler} = this.props;\n    let {initialMouseDownPosition} = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (Math.abs(myEV.domX-initialMouseDownPosition.domX)<10 ||\n        Math.abs(myEV.domY-initialMouseDownPosition.domX)<10) {\n      return;\n    }\n    else {\n      selectingHandler({start:initialMouseDownPosition,end:myEV});\n      this.transition(ACTION_MOUSEMOVE);\n    }\n  }\n\n  handleMouseUp_AutoSelecting = (ev)=>{\n    this.transition(ACTION_MOUSEUP);\n  }\n  \n  handleMouseMove_Selecting = (ev)=>{\n    let {selectingHandler} = this.props;\n    let {initialMouseDownPosition} = this;\n    let myEV = this.getCustomEventObject(ev);\n    selectingHandler({start:initialMouseDownPosition,end:myEV});\n  }\n\n  handleMouseUp_Selecting = (ev)=>{\n    let {selectedHandler} = this.props;\n    let {initialMouseDownPosition} = this;\n    let myEV = this.getCustomEventObject(ev);\n    selectedHandler({start:initialMouseDownPosition,end:myEV});\n    this.transition(ACTION_MOUSEUP);\n  }\n\n  handleMouseMove_Panning = (ev)=>{\n    let {panningHandler} = this.props;\n    let {initialMouseDownPosition} = this;\n    let myEV = this.getCustomEventObject(ev);\n    panningHandler({start:initialMouseDownPosition,end:myEV});\n  }\n\n  handleMouseUp_Panning = (ev)=>{\n    let {pannedHandler} = this.props;\n    let {initialMouseDownPosition} = this;\n    let myEV = this.getCustomEventObject(ev);\n    pannedHandler({start:initialMouseDownPosition,end:myEV});\n    this.transition(ACTION_MOUSEUP);\n  }\n}\n\nPlotInteractionBox.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  children: PropTypes.node,\n  transitionGraph: PropTypes.object.isRequired,\n  hoveringHandler: PropTypes.func.isRequired,\n  hoverEndHandler: PropTypes.func.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n  doubleClickHandler: PropTypes.func.isRequired,\n  selectingHandler: PropTypes.func.isRequired,\n  selectedHandler: PropTypes.func.isRequired,\n  panningHandler:  PropTypes.func.isRequired,\n  pannedHandler: PropTypes.func.isRequired,\n}\n\nexport default PlotInteractionBox;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PlotInteractionBox from \"./PlotInteractionBox\";\n\nclass PlotInteractionProvider extends Component {\n  constructor(props){\n    super(props);\n    this.state = {hoveringPosition:null,\n                  clickPosition:null,\n                  doubleClickPosition:null,\n                  selectingPositions:null,\n                  selectedPositions:null,\n                  panningPositions:null,\n                  pannedPositions:null\n                  };\n  }\n  \n  render(){\n    let {render,width,height,transitionGraph} = this.props;\n    return (\n      <PlotInteractionBox width={width}\n                          height={height}\n                          transitionGraph={transitionGraph}\n                          hoveringHandler={this.handleHovering}\n                          hoverEndHandler={this.handleHoverEnd}\n                          clickHandler={this.handleClick}\n                          doubleClickHandler={this.handleDoubleClick}\n                          selectingHandler={this.handleSelecting}\n                          selectedHandler={this.handleSelected}\n                          panningHandler={this.handlePanning}\n                          pannedHandler={this.handlePanned}\n                          >\n        {render(this.state)}\n      </PlotInteractionBox>\n    );\n  }\n\n  handleHovering = (hoveringPosition)=>{\n    this.setState({hoveringPosition});\n  }\n\n  handleHoverEnd = ()=>{\n    this.setState({hoveringPosition:null});\n  }\n\n  handleClick = (clickPosition)=>{\n    this.setState({clickPosition});\n  }\n  \n  handleDoubleClick = (doubleClickPosition)=>{\n    this.setState({doubleClickPosition});\n  }\n  \n  handleSelecting = (selectingPositions)=>{\n    this.setState({ selectingPositions });\n  }\n  \n  handleSelected = (selectedPositions)=>{\n    this.setState({ selectedPositions,\n                    selectingPositions:null});\n  }\n  \n  handlePanning = (panningPositions)=>{\n    this.setState({ panningPositions });\n  }\n  \n  handlePanned = (pannedPositions)=>{\n    this.setState({ pannedPositions,\n                    panningPositions:null});\n  }\n}\n\nPlotInteractionProvider.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  render: PropTypes.func.isRequired,\n  transitionGraph:  PropTypes.object.isRequired,\n}\n\nexport default PlotInteractionProvider;\n","import React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport VerticalCrosshair, {VerticalCrosshairSelector} from \"react-plot-vertical-crosshair\";\n\nimport {PlotInteractionBox,PlotInteractionProvider} from \"./lib\";\nimport {INTERACTION_MODEL_DEFAULT,INTERACTION_MODEL_SELECTING,\n        INTERACTION_MODEL_PANNING,INTERACTION_MODEL_BARE} from \"./lib\";\n// CSS\nimport \"./index.css\";\n\nconst TRANSITION_GRAPH = {INTERACTION_MODEL_DEFAULT,INTERACTION_MODEL_SELECTING,\n                          INTERACTION_MODEL_PANNING,INTERACTION_MODEL_BARE};\n\nclass PlotInteractionBoxBundle extends Component {\n  constructor(props){\n    super(props);\n    this.state = {width: 1000,\n                  height: 400,\n                  transitionGraph_: \"INTERACTION_MODEL_BARE\",\n                  interactions: {\n                    hoveringDomX: null,\n                    hoveringDomY: null,\n                    hoveringClientX: null,\n                    hoveringClientY: null,\n                    panningStartDomX: null,\n                    panningStartDomY: null,\n                    panningStartClientX: null,\n                    panningStartClientY: null,\n                    panningEndDomX: null,\n                    panningEndDomY: null,\n                    panningEndClientX: null,\n                    panningEndClientY: null,\n                    selectingStartDomX: null,\n                    selectingStartDomY: null,\n                    selectingStartClientX: null,\n                    selectingStartClientY: null,\n                    selectingEndDomX: null,\n                    selectingEndDomY: null,\n                    selectingEndClientX: null,\n                    selectingEndClientY: null,\n                    clickDomX: null,\n                    clickDomY: null,\n                    clickClientX: null,\n                    clickClientY: null,\n                    doubleClickDomX: null,\n                    doubleClickDomY: null,\n                    doubleClickClientX: null,\n                    doubleClickClientY: null\n                    }\n                  };\n  }\n  render() {\n    let {width,height,transitionGraph_,interactions} = this.state;\n    return(\n      <>\n        <div>\n          width\n          <input type=\"range\" min={500} max={1000} value={width} onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          height\n          <input type=\"range\" min={500} max={1000} value={height} onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          transitionGraph\n          <select value={transitionGraph_} onChange={(ev)=>this.setState({transitionGraph_:ev.target.value})}>\n            <option value=\"INTERACTION_MODEL_BARE\">BARE</option>\n            <option value=\"INTERACTION_MODEL_SELECTING\">SELECTING</option>\n            <option value=\"INTERACTION_MODEL_PANNING\">PANNING</option>\n            <option value=\"INTERACTION_MODEL_DEFAULT\">DEFAULT</option>\n          </select>\n        </div>\n        <div>\n          Additional arguments:\n          <ul>\n              <li>hoveringHandler: PropTypes.func.isRequired </li>\n              <li>hoverEndHandler: PropTypes.func.isRequired</li>\n              <li>clickHandler: PropTypes.func.isRequired</li>\n              <li>doubleClickHandler: PropTypes.func.isRequired</li>\n              <li>selectingHandler: PropTypes.func.isRequired</li>\n              <li>selectedHandler: PropTypes.func.isRequired</li>\n              <li>panningHandler:  PropTypes.func.isRequired</li>\n              <li>pannedHandler: PropTypes.func.isRequired</li>\n          </ul>\n        </div>\n        <PlotInteractionBox width={width}\n                            height={height}\n                            transitionGraph={TRANSITION_GRAPH[transitionGraph_]}\n                            hoveringHandler={(positions)=>this.setState( {interactions:{...interactions,\n                                                                                        hoveringDomX: positions.domX,\n                                                                                        hoveringDomY: positions.domY,\n                                                                                        hoveringClientX: positions.clientX,\n                                                                                        hoveringClientY: positions.clientY,\n                                                                                        }\n                                                                          })\n                                              }\n                            hoverEndHandler={()=>this.setState( {interactions:{ ...interactions,\n                                                                                hoveringDomX: null,\n                                                                                hoveringDomY: null,\n                                                                                hoveringClientX: null,\n                                                                                hoveringClientY: null,\n                                                                                }\n                                                                })\n                                              }\n                            clickHandler={(positions)=>this.setState( {interactions:{ ...interactions,\n                                                                                      clickDomX: positions.domX,\n                                                                                      clickDomY: positions.domY,\n                                                                                      clickClientX: positions.clientX,\n                                                                                      clickClientY: positions.clientY,\n                                                                                      }\n                                                                      })\n                                              }\n                            doubleClickHandler={(positions)=>this.setState({interactions:{...interactions,\n                                                                                          doubleClickDomX: positions.domX,\n                                                                                          doubleClickDomY: positions.domY,\n                                                                                          doubleClickClientX: positions.clientX,\n                                                                                          doubleClickClientY: positions.clientY,\n                                                                                          }\n                                                                            })\n                                                }\n                            selectingHandler={(positions)=>this.setState({interactions:{...interactions,\n                                                                                        selectingStartDomX: positions.start.domX,\n                                                                                        selectingStartDomY: positions.start.domY,\n                                                                                        selectingStartClientX: positions.start.clientX,\n                                                                                        selectingStartClientY: positions.start.clientY,\n                                                                                        selectingEndDomX: positions.end.domX,\n                                                                                        selectingEndDomY: positions.end.domY,\n                                                                                        selectingEndClientX: positions.end.clientX,\n                                                                                        selectingEndClientY: positions.end.clientY,\n                                                                                        }\n                                                                          })\n                                              }\n                            selectedHandler={(positions)=>this.setState({ interactions:{...interactions,\n                                                                                        selectingStartDomX: null,\n                                                                                        selectingStartDomY: null,\n                                                                                        selectingStartClientX: null,\n                                                                                        selectingStartClientY: null,\n                                                                                        selectingEndDomX: null,\n                                                                                        selectingEndDomY: null,\n                                                                                        selectingEndClientX: null,\n                                                                                        selectingEndClientY: null,\n                                                                                        }\n                                                                          })\n                                              }\n                            panningHandler={(positions)=>this.setState({interactions:{...interactions,\n                                                                                      panningStartDomX: positions.start.domX,\n                                                                                      panningStartDomY: positions.start.domY,\n                                                                                      panningStartClientX: positions.start.clientX,\n                                                                                      panningStartClientY: positions.start.clientY,\n                                                                                      panningEndDomX: positions.end.domX,\n                                                                                      panningEndDomY: positions.end.domY,\n                                                                                      panningEndClientX: positions.end.clientX,\n                                                                                      panningEndClientY: positions.end.clientY,\n                                                                                      }\n                                                                        })\n                                            }\n                            pannedHandler={(positions)=>this.setState({ interactions:{...interactions,\n                                                                                      panningStartDomX: null,\n                                                                                      panningStartDomY: null,\n                                                                                      panningStartClientX: null,\n                                                                                      panningStartClientY: null,\n                                                                                      panningEndDomX: null,\n                                                                                      panningEndDomY: null,\n                                                                                      panningEndClientX: null,\n                                                                                      panningEndClientY: null,\n                                                                                      }\n                                                                        })\n                                            }\n                            >\n          <div style={{width:\"100%\",height:\"100%\",backgroundColor:\"grey\"}}>\n          </div>\n        </PlotInteractionBox>\n        <div>\n          * The mouse interaction goes to the state and then updates this JSON display.\n          <pre>\n            {JSON.stringify(this.state.interactions,null,' ')}\n          </pre>\n        </div>\n      </>\n    );\n  }\n}\n\nclass PlotInteractionProviderBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {width: 1000,\n                  height: 400,\n                  transitionGraph_: \"INTERACTION_MODEL_BARE\"\n                  }\n  }\n  render(){\n    let {width,height,transitionGraph_} = this.state;\n    return (\n      <>\n        <div>\n          width\n          <input type=\"range\" min={500} max={1000} value={width} onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          height\n          <input type=\"range\" min={500} max={1000} value={height} onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          transitionGraph\n          <select value={transitionGraph_} onChange={(ev)=>this.setState({transitionGraph_:ev.target.value})}>\n            <option value=\"INTERACTION_MODEL_BARE\">BARE</option>\n            <option value=\"INTERACTION_MODEL_SELECTING\">SELECTING</option>\n            <option value=\"INTERACTION_MODEL_PANNING\">PANNING</option>\n            <option value=\"INTERACTION_MODEL_DEFAULT\">DEFAULT</option>\n          </select>\n        </div>\n        <div>\n          Additional arguments:\n          <ul>\n              <li>render</li>\n          </ul>\n        </div>\n        <PlotInteractionProvider  width={width}\n                                  height={height}\n                                  transitionGraph={TRANSITION_GRAPH[transitionGraph_]}\n                                  render={(data) => {\n          return (\n            <div style={{width:\"100%\",height:\"100%\",backgroundColor:\"lightgrey\"}}>\n              <pre style={{fontSize:\"8pt\"}}>\n                {JSON.stringify(data,null,' ')}\n              </pre>\n            </div>\n          )\n                                  }}/>\n      </>\n    )\n  }\n}\n\nclass PlotInteractionProviderwithVerticalCrosshairBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {crosshairX:null};\n  }\n  \n  render() {\n    let {crosshairX} = this.state;\n    let width = 400;\n    let height = 400; \n    let minX = 0;\n    let maxX = 400;\n    \n    return (\n      <div style={{position:\"relative\",width:width,height:height}}>\n        <div style={{ position:\"absolute\",\n                      backgroundImage:\"linear-gradient(to bottom right, rgba(0,0,0,0), lightblue)\",\n                      width:width,height:height\n                      }}>\n        </div>\n        <div style={{ position:\"absolute\",\n                      backgroundImage:\"linear-gradient(to bottom right, pink, rgba(0,0,0,0))\",\n                      width:width,height:height\n                      }}>\n        </div>\n        <div style={{ position:\"absolute\",\n                      width:width,height:height\n                      }}>\n          <VerticalCrosshair  width={width} height={height}\n                              minX={minX}\n                              maxX={maxX}\n                              X={crosshairX}\n                              />\n        </div>\n        <div style={{ position:\"absolute\",\n                      width:width,height:height\n                      }}>\n          <PlotInteractionProvider  width={width} height={height}\n                                    transitionGraph={INTERACTION_MODEL_BARE}\n                                    render={(positions)=>\n            <VerticalCrosshairSelector  width={width}\n                                        minX={minX}\n                                        maxX={maxX}\n                                        hoveringPosition={positions.hoveringPosition}\n                                        selectHandler={(X)=>{\n                                          this.setState({crosshairX:X});\n                                        }}\n                                        />\n                                    }/>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst App = (props)=>{\n  return (\n    <Router>\n      <nav className=\"app\">\n        <Link to=\"/PlotInteractionBox\">PlotInteractionBox</Link>\n        <Link to=\"/PlotInteractionProvider\">PlotInteractionProvider</Link>\n        <Link to=\"/PlotInteractionProvider_with_VerticalCrosshair\">PlotInteractionProvider with VerticalCrosshair</Link>\n      </nav>\n      <Route path=\"/PlotInteractionBox\" exact component={PlotInteractionBoxBundle}/>\n      <Route path=\"/PlotInteractionProvider\" exact component={PlotInteractionProviderBundle}/>\n      <Route path=\"/PlotInteractionProvider_with_VerticalCrosshair\" exact component={PlotInteractionProviderwithVerticalCrosshairBundle}/>\n    </Router>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import {PureComponent} from \"react\";\nimport {fromDomXCoord_Linear} from \"plot-utils\";\n\nclass PlotHorizontalPanningController extends PureComponent {\n  constructor(props){\n    super(props);\n    this.lastEvent = null;\n    this.snapshot = {};\n  }\n  \n  render(){\n    return null;\n  }\n  \n  componentDidMount(){\n    this.pan();\n  }\n  \n  componentDidUpdate(){\n    this.pan();\n  }\n  \n  pan() {\n    let { panningPositions,panHandler,\n          minX,maxX,width} = this.props;\n    let {snapshot} = this;\n    // Do not process stale panningPositions\n    if (panningPositions===this.lastEvent) {\n      return;\n    }\n    // Panning stops\n    if (panningPositions===null) {\n      this.lastEvent = null;\n      return;\n    }\n    // Panning ongoing\n    if (!this.lastEvent) {\n      //Start of panning, store snapshot\n      snapshot.minX = minX;\n      snapshot.maxX = maxX;\n      snapshot.width = width;\n      snapshot.initialDataX = fromDomXCoord_Linear(width,minX,maxX,panningPositions.start.domX);\n    }\n    let curDataX = fromDomXCoord_Linear(snapshot.width,snapshot.minX,snapshot.maxX,panningPositions.end.domX);\n    let deltaX = curDataX - snapshot.initialDataX;\n    panHandler(snapshot.minX-deltaX, snapshot.maxX-deltaX);\n    this.lastEvent = panningPositions;\n  }\n}\n\n\n\nexport default PlotHorizontalPanningController;\n"],"sourceRoot":""}